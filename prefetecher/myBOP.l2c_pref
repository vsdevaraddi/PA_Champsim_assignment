#include <map>
#include "cache.h"
#include <list>
#include <iterator>

#define RR_Count 64
#define IP_TRACKER_COUNT 1024
#define PREFETCH_DEGREE 1
#define SCOREMAX 31
#define ROUNDMAX 100
#define offset_count 34
using namespace std;

int round_count = 0;

int current_offset = 0;

map<uint8_t, uint16_t> RR_Table;

map<int,int> offset_score_table;

int offset_list[34] = {1,2,3,4,5,6,8,9,10,12,15,16,18,20,24,25,27,30,32,36,40,45,48,50,54,60,64,72,75,80,81,90,96,100};

uint16_t test_index = 4032;
uint32_t test_tag = 16773120;

void CACHE::l2c_prefetcher_initialize() 
{
	cout << "CPU " << cpu << " L2C next line prefetcher" << endl;
	
	
	uint16_t RR_initial_Tag = 0;
	for(uint8_t i=0;i<RR_Count;i++){
		//RR_Table[i] = RR_initial_Tag;
		RR_Table.insert({i,RR_initial_Tag}); 	
	}
	
	for(int i=0;i<offset_count;i++){
		//offset_score_table[offset_list[i]] = 0;
		offset_score_table.insert({offset_list[i],0});
	}
}

void reset_offset_table(){
	
	for(int i=0;i<offset_count;i++){
		offset_score_table[offset_list[i]] = 0;
	}
	round_count = 0;
	
}

int check_max(){

    	pair<int, int> entryWithMaxValue = make_pair(0, 0);
  
   
    	map<int, int>::iterator currentEntry;
    	for (currentEntry = offset_score_table.begin(); currentEntry != offset_score_table.end(); ++currentEntry) {
  
        	if (currentEntry->second > entryWithMaxValue.second) {
  
            		entryWithMaxValue = make_pair(currentEntry->first, currentEntry->second);
        	}
    	}
    
    	if(entryWithMaxValue.second >= 31){
    		cout<<"Came to max check"<<endl;
    		return 1;
    	}
    
    	else{
    		return 0;
    	}	
	
	
}

uint8_t fetch_RR_index(uint64_t address){

	uint64_t RR_index = address & test_index;
	RR_index = RR_index >> 6;
	
	return (uint8_t)RR_index;
	
}

uint16_t fetch_RR_Tag(uint64_t address){
		
	uint64_t RR_tag = address & test_tag;
	RR_tag = RR_tag >> 12;
	
	return (uint16_t)RR_tag;	
}

int find_in_RR(uint64_t address){
	
	uint8_t RR_index = fetch_RR_index(address);
	uint16_t RR_tag = fetch_RR_Tag(address);
	if(RR_Table[RR_index] == RR_tag){
		return 1;
	}
	
	return 0;
	
}

int find_max(){

    	pair<int, int> entryWithMaxValue = make_pair(0, 0);
  
   
    	map<int, int>::iterator currentEntry;
    	for (currentEntry = offset_score_table.begin(); currentEntry != offset_score_table.end(); ++currentEntry) {
  
        	if (currentEntry->second > entryWithMaxValue.second) {
  
            		entryWithMaxValue = make_pair(currentEntry->first, currentEntry->second);
        	}
    	}
    	//cout << "max value is : " << entryWithMaxValue.second << endl;
    	return entryWithMaxValue.first;
}

void add_to_RR(uint64_t address){
	uint8_t RR_index = fetch_RR_index(address);
	uint16_t RR_tag = fetch_RR_Tag(address);
	RR_Table[RR_index] = RR_tag;
	
}

uint32_t CACHE::l2c_prefetcher_operate(uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type, uint32_t metadata_in)
{
  	//uint64_t pf_addr = ((addr>>LOG2_BLOCK_SIZE)+1) << LOG2_BLOCK_SIZE;
	
	//uint64_t rf_addr = addr;
	
	if(round_count >= 100 ){
		current_offset = find_max();
		cout << "hello"<<current_offset << endl;
		reset_offset_table();
	}
	
	
	if(check_max()){
		current_offset = find_max();
		cout << "hello1"<<current_offset << endl;
		reset_offset_table();
	}
	
	cout << "count of round" << round_count << endl;
	//cout << "Check_max" << check_max()<< endl;
	
	uint64_t dummy_addr;
	//offset_score_table[offset_list[i]] = offset_score_table[offset_list[i]] + 1
	
	for(int i=0;i<sizeof(offset_list);i++){
		//dummy_addr = rf_addr - offset_list[i];
		dummy_addr = ((addr>>LOG2_BLOCK_SIZE)-offset_list[i]) << LOG2_BLOCK_SIZE;
		if(find_in_RR(dummy_addr)){
			offset_score_table[offset_list[i]] = offset_score_table[offset_list[i]] + 1;
			//cout << "Found in RR "<< offset_score_table[offset_list[i]]<< endl;
		}
	}
	
	round_count = round_count + 1;
	
	//current_offset = find_max();
	uint64_t pf_addr = ((addr>>LOG2_BLOCK_SIZE)+current_offset) << LOG2_BLOCK_SIZE;
	//uint64_t pf_addr = addr + offset;
	 if (MSHR.occupancy < (MSHR.SIZE>>1)){
	      if(prefetch_line(ip, addr, pf_addr, FILL_L2, 0)){
		add_to_RR(addr);
		}
	}
        else{
         	if( prefetch_line(ip, addr, pf_addr, FILL_LLC, 0)){
		add_to_RR(addr);
		}
	}
	     
	
	

	return metadata_in;
}

uint32_t CACHE::l2c_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr, uint32_t metadata_in)
{
  return metadata_in;
}

void CACHE::l2c_prefetcher_final_stats()
{
	cout << "CPU " << cpu << " L2C next line prefetcher final stats" << endl;
}
