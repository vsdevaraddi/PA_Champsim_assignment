#include "ooo_cpu.h"

#define IP_LENGTH_FOR_HASHING 14
#define PHT_SIZE int(pow(2,IP_LENGTH_FOR_HASHING)) //PHT table size
#define PER_BRANCH_HISTORY_LENGTH 4
#define PER_BRANCH_HISTORY_MASK (1 << PER_BRANCH_HISTORY_LENGTH) - 1 

int per_branch_history_table[NUM_CPUS][PHT_SIZE];

#define BRANCH_HISTORY_TABLE_SIZE 16384
int branch_history_table[NUM_CPUS][BRANCH_HISTORY_TABLE_SIZE];
int my_last_prediction[NUM_CPUS];

void O3_CPU::initialize_branch_predictor()
{
    cout << "CPU " << cpu << " PSHARE branch predictor" << endl;

    for(int i=0;i<PHT_SIZE;i++){
    	per_branch_history_table[cpu][i] = 0;
    }
    my_last_prediction[cpu] = 0;

    for(int i=0; i<BRANCH_HISTORY_TABLE_SIZE; i++)
        branch_history_table[cpu][i] = 2; // 2 is slightly taken
}

unsigned int ps_table_hash(uint64_t ip, int pbh_vector)
{
    unsigned int hash = ip^(ip>>IP_LENGTH_FOR_HASHING)^(ip>>(IP_LENGTH_FOR_HASHING*2))^pbh_vector;
    hash = hash%BRANCH_HISTORY_TABLE_SIZE;

    //printf("%d\n", hash);

    return hash;
}

uint8_t O3_CPU::predict_branch(uint64_t ip)
{
    int prediction = 1;
    
    int ps_hash = ps_table_hash(ip, per_branch_history_table[cpu][ip % PHT_SIZE]);

    if(branch_history_table[cpu][ps_hash] >= 2)
        prediction = 1;
    else
        prediction = 0;

    my_last_prediction[cpu] = prediction;

    return prediction;
}

void O3_CPU::last_branch_result(uint64_t ip, uint8_t taken)
{
    int ps_hash = ps_table_hash(ip, per_branch_history_table[cpu][ip % PHT_SIZE]);

    if(taken == 1) {
        if(branch_history_table[cpu][ps_hash] < 3)
            branch_history_table[cpu][ps_hash]++;
    } else {
        if(branch_history_table[cpu][ps_hash] > 0)
            branch_history_table[cpu][ps_hash]--;
    }

    // update branch history vector
    per_branch_history_table[cpu][ip % PHT_SIZE] <<= 1;
    per_branch_history_table[cpu][ip % PHT_SIZE] &= PER_BRANCH_HISTORY_MASK;
    per_branch_history_table[cpu][ip % PHT_SIZE] |= taken;
}
